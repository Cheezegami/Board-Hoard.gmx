<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle System

part1_sys = part_system_create();
part_system_depth(part1_sys,0);

// Farticle
part1 = part_type_create();
part_type_shape(part1,pt_shape_star);
part_type_scale(part1,1,1);
part_type_size(part1,0.55,0.6,-0.01,0);
part_type_alpha2(part1, 0.55,0.22);
part_type_life(part1, 15, 20);
part_type_colour3(part1,c_red, c_aqua, c_fuchsia);

// Farticle Emitter
part1_emit = part_emitter_create(part1_sys);
part_emitter_region(part1_sys,part1_emit, obj_player.x-30,obj_player.x,obj_player.y-40,obj_player.y+40,ps_shape_ellipse,ps_distr_gaussian);
part_emitter_stream(part1_sys,part1_emit,part1, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
hsp = 0;
vsp = 0;
// Zoom
basezoom = 1.2;
zoom = basezoom;
jumpzoom = 1.25;
rampzoom = 1.5;

//Shake
shakeIntensity = 5;
screenshake = 0;
canShake = false;

//Outfits
outfit = 0;

//Gravity
grav = 1.82;
maxGrav = 10.5;

//Jumps
jumpSpeed = 0.121;
jumpDuration = 22;
jumpCalculation = 0;
linearJump = 0.1;
jump = false;
jumpSpin = false;
changeJumpAnimation = false;

//Ramps
ramp = false;
rampCalculation = 0;

//ImageSpeed
imageSpeed = 0.25;
imageSpeedJump = 0.15;
image_speed = imageSpeed;

//Movement
moveSpeed = 4;
step = 10;
constantspeed = 8;

//Collision
collision = false;
collisionBonusTime = 4;
collisionBonusCalculation = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement and Behaviour

//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check(vk_space);

//React to inputs
move = key_left + key_right;

if(move != 0) {
    move_contact_solid(90, step);
    if(move &gt; 0) {
        //move_contact_solid(0, hsp);
        //image_xscale = 1;
    }
    else if (move &lt; 0) {
        //move_contact_solid(180, hsp);
        //image_xscale = -1;
    }
    move_contact_solid(270, step);
}
 
if(!place_free(x,y+16))
{
    if(collision = false){
        collision = true;
    } 
}
else
{
    collision = false;
}

if(collision == true) {

    if(jump == false) {
        collisionBonusCalculation = collisionBonusTime;
    }
    if(key_jump == true &amp;&amp; jumpCalculation &lt;= 0)
    {
        // Temporary in Player.
        randomize();
        jump = true;
        if(random(10) &gt; 8)
        {
            jumpSpin = true;
        }
        else
        {
            jumpSpin = false;
        }
        jumpCalculation = jumpDuration-(rampCalculation/1.2);
    }
}

if(jump == true)
{
    changeJumpAnimation = true;
    if(jumpSpin == true)
    {
        image_angle -= 360 / jumpDuration;
    }
    else
    {
        
    }
    vspeed -= (jumpCalculation * jumpSpeed) + linearJump;
    if(jumpCalculation &lt;= 0)
    {
        jump = false;
    }
    jumpCalculation--;
}

if(ramp = true)
{
    changeJumpAnimation = true;
    vspeed -= (rampCalculation * jumpSpeed) + linearJump;
    if(rampCalculation &lt;= 0)
    {
        ramp = false;
    }
    rampCalculation--;
}

if(key_jump == false &amp;&amp; jumpCalculation &gt; 1) {
    jump = false;
    jumpCalculation = 0;
}

else {
    image_angle = 0;
}





if(vspeed &lt; maxGrav &amp;&amp; collisionBonusCalculation &lt;= 0) {
    vspeed += grav;
}

if(collisionBonusCalculation &gt; 0) {
    if(vspeed &gt; 0) {
        vspeed *= 0.7;
    }
    collisionBonusCalculation--;
}

if ((obj_mover.x-x) &gt; 300)
{
   move_contact_solid(0, moveSpeed);
}

move_contact_solid(90, step);
move_contact_solid(0, constantspeed);
move_contact_solid(270, step);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle System

part_emitter_region(part1_sys,part1_emit, obj_player.x-30,obj_player.x,obj_player.y-40,obj_player.y+40,ps_shape_ellipse,ps_distr_gaussian);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Outfit
event_perform(ev_create, 1);
switch(outfit)
{   
    case 0:
        sprite_index = spr_player;
        break;
    case 1:
        grav = 1.5;
        sprite_index = spr_player2;
        break;
    default:
        sprite_index = spr_player;       
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations
if(changeJumpAnimation = true) {
    if(jump == true) {
        if(zoom&gt;jumpzoom){
            zoom -= 0.003;
        }
        if(zoom&lt;jumpzoom){
            zoom += 0.003;
        }
    }
    if(ramp == true) {
        if(zoom&gt;rampzoom){
            zoom -= 0.01;
        }
        if(zoom&lt;rampzoom){
            zoom += 0.01;
        }
    }
    image_speed = imageSpeedJump;
    if(sprite_index == spr_player) 
    {
        sprite_index = spr_playerJump;
    }
        if(sprite_index == spr_player2) 
    {
        sprite_index = spr_playerJump2;
    }
}
else if(zoom&lt;basezoom){
    zoom += 0.01;
}
else if(zoom&gt;basezoom){
    zoom -= 0.01;
}
view_wview[0] = 1280 / zoom
view_hview[0] = 720 / zoom

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tileCollision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(changeJumpAnimation == true)
    changeJumpAnimation = false;
    if(sprite_index == spr_playerJump) {
    sprite_index = spr_player;
    }
    if(sprite_index == spr_playerJump2) {
    sprite_index = spr_player2;
    image_speed = imageSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(screenshake &gt; 0) {
    obj_mover.x = baseposX;
    obj_mover.y = baseposY;
    screenshake--;
    shakeIntensity--;
    canShake = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(screenshake &gt; 0) {
    baseposX = obj_mover.x;
    baseposY = obj_mover.y;
    obj_mover.x += random_range (-shakeIntensity,shakeIntensity);
    obj_mover.y += random_range (-shakeIntensity,shakeIntensity);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.0199999995529652</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
