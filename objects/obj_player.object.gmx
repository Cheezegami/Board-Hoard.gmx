<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 2;
hsp = 0;
vsp = 0;
jumpSpeed = 0.052;
linearJump = 1;
jumpDuration = 55;
jumpCalculation = 0;
moveSpeed = 8;
jump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
hsp = move * moveSpeed;
if (vsp &lt; 10)
{
    vsp += grav;
}
 
if (place_meeting(x,y+1,obj_tile1))
{
    if(key_jump == true) {
        jump = true;
        jumpCalculation = jumpDuration;
    }
}

draw_text(5, 5, jumpCalculation);

if(jump == true)
{
    vsp -= (jumpCalculation * jumpSpeed);
    if(jumpCalculation &lt;= 0)
    {
        jump = false;
    }
    jumpCalculation--;
}


//Horizontal Collision
if (place_meeting(x+hsp,y,obj_tile1))
{
    while(!place_meeting(x+sign(hsp),y,obj_tile1))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;


if(hsp &gt; 0)
{
    image_xscale = 1;
}
else if (hsp &lt; 0)
{
    image_xscale = -1;
}

//Vertical Collision
if (place_meeting(x,y+vsp,obj_tile1))
{
    while(!place_meeting(x,y+sign(vsp),obj_tile1))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
